pipeline{
    agent{
        docker { 
             image 'srisatyap/mvn-docker-jdk21:latest'
             args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    stages{
        stage('checkout'){
            steps{
            checkout scm
            sh 'git --version'
        }
        }
        stage('Build Test and Package'){
            steps{
            sh 'mvn clean package'
        }
        }
        stage('static code analysis'){
            /*
            environment { 
                SONAR_URL = "http://xxx.xxx.xxx.xxx:9000"
            } */
            steps{
            withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN'),
             string(credentialsId:'sonar-url', variable:'SONAR_URL')]){
                sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}' 
            }
        }
        } 
        stage('build docker image and push'){
            environment{
                DOCKER_IMAGE="srisatyap/ci-cd:${BUILD_NUMBER}"
                //REGISTRY_CREDENTIALS=credentials("docker-hub-cred")
            }
            steps{
                sh "docker build -t ${DOCKER_IMAGE} ."      
                withCredentials([usernamePassword(credentialsId: 'docker-hub-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]){
                    sh "echo '${DOCKERHUB_PASSWORD}' | docker login -u '${DOCKER_USERNAME}' --password-stdin"
                    sh "docker push ${DOCKER_IMAGE}"
                }
                //def dockerImage = docker.image("${DOCKER_IMAGE}") //creating the docker image object
                //docker.withRegistry('https://index.docker.io/v1/', "docker-hub-cred") {
                //dockerImage.push() // docker image object allows you to perform various docker operations
            }
        }
        stage('Fix git ownership'){
            steps{
                sh '''
                git config --global --add safe.directory /var/lib/jenkins/workspace/springbootapp-pipeline
                if [-d ".git"]; then
                  chown -R root:root .git
                fi
                '''
            }
        }
        stage('update deployment file'){
            environment{
                GIT_REPO_NAME = "SpringbootApp-Jenkins-ArgoCd"
                GIT_USER_NAME = "SriSatyaPothala"
            }
            steps{
            withCredentials([string(credentialsId: 'github', passwordVariable: 'GITHUB_TOKEN')]){
                sh '''
                    pwd
                    git config user.email "srisatyapothala11@gmail.com"
                    git config user.name "SriSatyaPothala"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replacetag/${BUILD_NUMBER}/g" manifests/deployment.yaml
                    git add manifests/deployment.yaml
                    git commit -m "Updated deployment.yaml file with new image"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                 '''
            }
            }
        }

        }     
}