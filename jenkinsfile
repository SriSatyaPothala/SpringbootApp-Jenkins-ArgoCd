pipeline{
    agent{
        // for this step to be successful
        // u need jenkins docker pipeline plugin installed and configured in tool management.
        
        docker { 
             image 'maven:3.9.9-eclipse-temurin-21'
             args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    stages{
        stage('Build Test and Package'){
            steps{
            sh 'mvn clean package'
        }
        }
        stage('static code analysis'){
            environment { 
                SONAR_URL = "http://65.2.189.129:9000"
            }
            steps{
            withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]){
                sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}' 
            }
        }
        } 
        stage('build docker image and push'){
            environment{
                DOCKER_IMAGE="srisatyap/ci-cd:${BUILD_NUMBER}"
                //REGISTRY_CREDENTIALS=credentials("docker-hub-cred")
            }
            steps{
                sh 'cd Dockerfile'
                sh 'docker build -t ${DOCKER_IMAGE} .'
                withCredentials([usernamePassword(credentialsId: 'docker-hub-cred', usernameVariable: 'DOCKER_USERNAME', userPassword: 'DOCKERHUB_PASSWORD')]){
                    sh "echo '${DOCKERHUB_PASSWORD}' | docker login -u '${DOCKER_USERNAME}' --password-stdin"
                    sh 'docker push ${DOCKER_IMAGE}'
                }
                //def dockerImage = docker.image("${DOCKER_IMAGE}") //creating the docker image object
                //docker.withRegistry('https://index.docker.io/v1/', "docker-hub-cred") {
                //dockerImage.push() // docker image object allows you to perform various docker operations
            }
        }
        }     
}